#	Comments & interleaves
rule(interleave=false) comment = "//" (. - ("\r" | "\n"))*;
rule(interleave=false) blockSpacer = " " | "\t" | "\r";
rule(interleave=false) padding = blockSpacer | "\n" | comment;
interleave = padding;

#	tokens
rule(interleave=false) identifier = ("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "0".."9")* => text;
rule(interleave=false) boolean = "true" | "false" => boolean(text);
rule(interleave=false) number = ("0".."9");
rule(interleave=false) integer = number+ => integer(text);
rule(interleave=false) float = "-"? number* ("." number+)? => float(text);
rule(interleave=false) character = normal:(. - ("\"" | "\r" | "\n" | "\\"))
	| escapeQuote:("\\" "\"") | escapeBackslash:"\\\\"
	| escapeLetter:("\\" l:("n" | "r" | "t" | "v"))
	| escapeHexa:("\\x" h:("0".."9" | "a".."f" | "A".."F"){1,2});
rule(interleave=false) singleQuotableString = ((. - "'") | "\\'")* => text;
rule(interleave=false) doubleQuotableString = ((. - '"') | '\\"')* => text;
rule(interleave=false) singleQuotedString = "'" quotedString:singleQuotableString "'" => quotedString;
rule(interleave=false) doubleQuotedString = '"' quotedString:doubleQuotableString '"' => quotedString;
rule(interleave=false) quotedString = doubleQuotedString | singleQuotedString;

#	Scalars
rule scalarValue = boolean:boolean | integer:integer | float:float | string:quotedString;

#	Column expression
rule columnExpression = id:(id:identifier "=" => id)? scalar:scalarValue =>
	{ "columnName" : firstOrNull(id), "scalar" : scalar};
rule columnExpressionList = head:columnExpression
	tail:("," ce:columnExpression => ce)* => prepend(head, tail);

#	Operators
rule printOperator = "print" c:columnExpressionList => { "columns" : c };

#	main rule
rule main = print:printOperator | a:"" => { "query" : defaultOutput };